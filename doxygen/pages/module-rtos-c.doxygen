/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person 
 * obtaining a copy of this software and associated documentation 
 * files (the "Software"), to deal in the Software without 
 * restriction, including without limitation the rights to use, 
 * copy, modify, merge, publish, distribute, sublicense, and/or 
 * sell copies of the Software, and to permit persons to whom 
 * the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be 
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// ----------------------------------------------------------------------------

/**
 @defgroup cmsis-plus-rtos-c-core Core & scheduler
 @ingroup cmsis-plus-rtos-c
 @brief  C API core & scheduler definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-core "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      flag = os_sched_is_started ();
      assert(flag);

      // ...
        {
          // Scheduler critical section
          os_sched_state_t st;
          st = os_sched_lock (true);

          // ...
          flag = os_sched_is_locked ();
          assert(flag);

          // ...
          os_sched_unlock (st);
        }

      // ...
      flag = os_sched_is_locked ();
      assert(!flag);
    }

    {
      // Interrupts critical section
      os_irq_state_t st;
      st = os_irq_critical_enter ();
      // ...
        {
          // Interrupts uncritical section
          os_irq_state_t st2;
          st2 = os_irq_uncritical_enter ();
          // ...
          os_irq_uncritical_exit (st2);
        }
      // ...
      os_irq_critical_exit (st);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-thread Threads
 @ingroup cmsis-plus-rtos-c
 @brief  C API thread definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-thread "RTOS C++ API"

 @par Examples

 @code{.c}
void*
func (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);

  return NULL;
}

int
os_main (int argc, char* argv[])
{
    {
      // Unnamed default thread; stack dynamically allocated.
      os_thread_t th1;
      os_thread_construct (&th1, NULL, func, NULL, NULL);

      name = os_thread_get_name (&th1);

      os_thread_join (&th1, NULL);

      // The destroy() is recommended, but not mandatory when using join().
      // The test checks if join() fully destroys the thread.
      os_thread_destruct(&th1);
    }

    {
      // Named default threads.
      os_thread_t th2;
      os_thread_construct (&th2, "th2", func, NULL, NULL);

      os_thread_join (&th2, NULL);

      os_thread_destruct(&th2);
    }

    {
      // Custom thread with static stack and lower priority.
      static char stack[2 * OS_INTEGER_RTOS_DEFAULT_STACK_SIZE_BYTES];

      os_thread_attr_t ath3;
      os_thread_attr_init (&ath3);
      ath3.th_priority = os_thread_priority_below_normal;
      ath3.th_stack_address = stack;
      ath3.th_stack_size_bytes = sizeof(stack);

      os_thread_t th3;
      os_thread_construct (&th3, "th3", func, NULL, &ath3);

      os_thread_prio_t prio;
      prio = os_thread_get_priority (&th3);
      os_thread_set_priority (os_this_thread (), prio);

      // Lower main thread priority to allow task to run.
      os_thread_set_priority (os_this_thread (), os_thread_priority_below_normal);

      os_thread_join (&th3, NULL);

      // Restore main thread priority.
      os_thread_set_priority (os_this_thread (), os_thread_priority_normal);

      os_thread_destruct(&th3);
    }

    {
      os_this_thread_flags_clear (os_flags_all, NULL);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_wait (0x3, NULL, os_flags_mode_all);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_try_wait (0x3, NULL, os_flags_mode_all);

      os_thread_flags_raise (os_this_thread (), 0x3, NULL);
      os_this_thread_flags_timed_wait (0x3, 10, NULL, os_flags_mode_all);
    }

    {
      size_t n;

      n = os_thread_stack_get_default_size ();
      os_thread_stack_set_default_size (n);

      n = os_thread_stack_get_min_size ();
      os_thread_stack_set_min_size (n);

      os_thread_stack_t* stack;
      stack = os_thread_get_stack (os_this_thread ());

      os_thread_stack_get_bottom (stack);

      os_thread_stack_get_top (stack);

      os_thread_stack_check_bottom_magic (stack);
      os_thread_stack_check_top_magic (stack);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-clock Clocks
 @ingroup cmsis-plus-rtos-c
 @brief  C API clocks definitions.
 @details

 @par For the complete definition, see
  @ref os::rtos::clock "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_sysclock_sleep_for (2);

      os_clock_timestamp_t ts;
      // Return number of ticks since epoch, or, if epoch not set, from startup.
      ts = os_sysclock_now ();

      os_sysclock_sleep_until (ts + 2);

      // Return the number of ticks since startup.
      ts = os_sysclock_steady_now ();

      // An event may resume the thread before the timeout expire.
      os_sysclock_wait_for (2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-condvar Condition variables
 @ingroup cmsis-plus-rtos-c
 @brief  C API condition variable definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-condvar "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_condvar_t cv1;
      os_condvar_construct (&cv1, "cv1", NULL);

      os_condvar_signal (&cv1);

      os_condvar_broadcast (&cv1);

      // TODO: test os_condvar_wait()

      name = os_condvar_get_name (&cv1);

      os_condvar_destruct (&cv1);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-evflag Event flags
 @ingroup cmsis-plus-rtos-c
 @brief  C API event flags definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-evflag "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_evflags_t ev1;
      os_evflags_construct (&ev1, "ev1", NULL);

      // Clear all flags.
      os_evflags_clear (&ev1, 0x0, NULL);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_wait (&ev1, 0x1, NULL,
                       os_flags_mode_all | os_flags_mode_clear);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_try_wait (&ev1, 0x1, NULL,
                           os_flags_mode_all | os_flags_mode_clear);

      os_evflags_raise (&ev1, 0x1, NULL);
      os_evflags_timed_wait (&ev1, 0x1, 1, NULL,
                             os_flags_mode_all | os_flags_mode_clear);

      os_evflags_get (&ev1, 0x1, os_flags_mode_clear);

      name = os_evflags_get_name (&ev1);

      os_evflags_destruct (&ev1);
    }

    {
      // Initialise custom event flags with a specific clock.
      os_evflags_attr_t aev2;
      os_evflags_attr_init (&aev2);

      aev2.clock = os_clock_get_rtclock ();

      os_evflags_t ev2;
      os_evflags_construct (&ev2, "ev2", &aev2);

      os_evflags_destruct (&ev2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mempool Memory pools
 @ingroup cmsis-plus-rtos-c
 @brief  C API memory pool definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-mempool "RTOS C++ API"

 @par Examples

 @code{.c}
typedef struct my_blk_s
{
  int i;
  const char* s;
} my_blk_t;

int
os_main (int argc, char* argv[])
{
  my_blk_t* blk;

    {
      // Simple pool, dynamically allocated.
      os_mempool_t p1;
      os_mempool_construct (&p1, "p1", 3, sizeof(my_blk_t), NULL);

      blk = os_mempool_alloc (&p1);
      os_mempool_free (&p1, blk);

      blk = os_mempool_try_alloc (&p1);
      os_mempool_free (&p1, blk);

      blk = os_mempool_timed_alloc (&p1, 1);
      os_mempool_free (&p1, blk);

      os_mempool_destruct (&p1);
    }

    {
      // Static pool.
      static char pool[1000];

      os_mempool_attr_t ap2;
      os_mempool_attr_init (&ap2);
      ap2.mp_pool_address = pool;
      ap2.mp_pool_size_bytes = sizeof(pool);
      ap2.clock = os_clock_get_rtclock ();

      os_mempool_t p2;
      os_mempool_construct (&p2, "p2", 3, sizeof(my_blk_t), &ap2);

      blk = os_mempool_alloc (&p2);

      os_mempool_free (&p2, blk);

      os_mempool_reset (&p2);

      os_mempool_destruct (&p2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mqueue Message queues
 @ingroup cmsis-plus-rtos-c
 @brief  C API message queue definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-mqueue "RTOS C++ API"

 @par Examples

 @code{.c}
typedef struct my_msg_s
{
  int i;
  const char* s;
} my_msg_t;

int
os_main (int argc, char* argv[])
{
  // Define two messages.

  my_msg_t msg_out =
    { 1, "msg" };

  my_msg_t msg_in =
    { 0, NULL };

    {
      // Simple queues, dynamically allocated.
      os_mqueue_t q1;
      os_mqueue_construct (&q1, "q1", 3, sizeof(my_msg_t), NULL);

      os_mqueue_send (&q1, &msg_out, sizeof(msg_out), 0);
      os_mqueue_try_send (&q1, &msg_out, sizeof(msg_out), 0);
      os_mqueue_timed_send (&q1, &msg_out, 1, sizeof(msg_out), 0);

      msg_in.i = 0;
      os_mqueue_receive (&q1, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      msg_in.i = 0;
      os_mqueue_try_receive (&q1, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      msg_in.i = 0;
      os_mqueue_timed_receive (&q1, &msg_in, sizeof(msg_in), 1, NULL);
      assert(msg_in.i = 1);

      const char* str;
      size_t n;

      str = os_mqueue_get_name (&q1);
      assert(strcmp (str, "q1") == 0);

      n = os_mqueue_get_capacity (&q1);
      assert(n == 3);

      n = os_mqueue_get_length (&q1);
      assert(n == 0);

      n = os_mqueue_get_msg_size (&q1);
      assert(n == sizeof(my_msg_t));

      os_mqueue_is_empty (&q1);

      os_mqueue_is_full (&q1);

      os_mqueue_reset (&q1);

      os_mqueue_destruct (&q1);
    }

    {
      // Static queue.
      // TODO: add macro to compute size.
      static char queue[1000];

      os_mqueue_attr_t aq2;
      os_mqueue_attr_init (&aq2);
      aq2.mq_queue_addr = queue;
      aq2.mq_queue_size_bytes = sizeof(queue);
      aq2.clock = os_clock_get_rtclock ();

      os_mqueue_t q2;
      os_mqueue_construct (&q2, "q2", 3, sizeof(my_msg_t), &aq2);

      os_mqueue_send (&q2, &msg_out, sizeof(msg_out), 0);

      msg_in.i = 0;
      os_mqueue_receive (&q2, &msg_in, sizeof(msg_in), NULL);
      assert(msg_in.i = 1);

      os_mqueue_destruct (&q2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-mutex Mutexes
 @ingroup cmsis-plus-rtos-c
 @brief  C API mutex definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-mutex "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      os_mutex_t mx1;
      os_mutex_construct (&mx1, "mx1", NULL);

      os_mutex_lock (&mx1);
      os_mutex_unlock (&mx1);

      os_mutex_try_lock (&mx1);
      os_mutex_unlock (&mx1);

      os_mutex_timed_lock (&mx1, 1);
      os_mutex_unlock (&mx1);

      name = os_mutex_get_name (&mx1);
      assert(strcmp (name, "mx1") == 0);

      os_thread_prio_t prio;
      prio = os_mutex_get_prio_ceiling (&mx1);

      os_mutex_set_prio_ceiling (&mx1, prio, NULL);

      os_thread_t* th;
      th = os_mutex_get_owner (&mx1);
      if (th != NULL)
        {
          os_thread_get_name (th);
        }

      os_mutex_reset (&mx1);

      os_mutex_destruct (&mx1);
    }

    {
      // Custom mutex, with RTC.
      os_mutex_attr_t amx2;
      os_mutex_attr_init (&amx2);

      amx2.mx_priority_ceiling = os_thread_priority_high;
      amx2.mx_protocol = os_mutex_protocol_protect;
      amx2.mx_type = os_mutex_type_recursive;
      amx2.mx_max_count = 7;
      amx2.mx_robustness = os_mutex_robustness_stalled;
      amx2.clock = os_clock_get_rtclock ();

      os_mutex_t mx2;
      os_mutex_construct (&mx2, "mx2", &amx2);

      os_mutex_destruct (&mx2);
    }

    {
      // Recursive mutex.
      os_mutex_t mx3;
      os_mutex_construct (&mx3, "mx3", os_mutex_attr_get_recursive ());

      os_mutex_destruct (&mx3);
    }

    {
      // Custom recursive mutex, with RTC.
      os_mutex_attr_t amx4;
      os_mutex_attr_init_recursive (&amx4);

      amx4.clock = os_clock_get_rtclock ();

      os_mutex_t mx4;
      os_mutex_construct (&mx4, "mx4", &amx4);

      os_mutex_destruct (&mx4);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-semaphore Semaphores
 @ingroup cmsis-plus-rtos-c
 @brief  C API semaphore definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-semaphore "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
    {
      // Binary semaphore, start at 0.
      os_semaphore_t sp1;
      os_semaphore_binary_construct (&sp1, "sp1", 0);

      os_semaphore_post (&sp1);
      os_semaphore_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_try_wait (&sp1);

      os_semaphore_post (&sp1);
      os_semaphore_timed_wait (&sp1, 1);

      os_semaphore_get_value (&sp1);

      os_semaphore_get_initial_value (&sp1);

      os_semaphore_reset (&sp1);

      name = os_semaphore_get_name (&sp1);

      os_semaphore_destruct (&sp1);
    }

    {
      // Custom semaphore.
      os_semaphore_attr_t asp2;
      os_semaphore_attr_init (&asp2);

      asp2.sm_initial_value = 3;
      asp2.sm_max_value = 7;
      asp2.clock = os_clock_get_rtclock ();

      os_semaphore_t sp2;
      os_semaphore_construct (&sp2, "sp2", &asp2);

      os_semaphore_destruct (&sp2);
    }

    {
      // Counting semaphore, 7 resources, start at 7.
      os_semaphore_t sp3;
      os_semaphore_counting_construct (&sp3, "sp3", 7, 7);

      os_semaphore_destruct (&sp3);
    }

    {
      // Custom binary semaphore.
      os_semaphore_attr_t asp4;
      os_semaphore_attr_binary_init (&asp4, 0);
      asp4.clock = os_clock_get_rtclock ();

      os_semaphore_t sp4;
      os_semaphore_construct (&sp4, "sp4", &asp4);

      os_semaphore_destruct (&sp4);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-timer Timers
 @ingroup cmsis-plus-rtos-c
 @brief  C API timer definitions.
 @details

 @par For the complete definition, see
  @ref cmsis-plus-rtos-timer "RTOS C++ API"

 @par Examples

 @code{.c}
void
tmfunc (void* args __attribute__((unused)))
{
  printf ("%s\n", __func__);
}

int
os_main (int argc, char* argv[])
{
   {
      os_timer_t tm1;
      os_timer_construct (&tm1, "tm1", tmfunc, NULL, NULL);

      os_sysclock_sleep_for (1); // Sync
      os_timer_start (&tm1, 1);

      os_sysclock_sleep_for (2);

      os_timer_stop (&tm1);

      name = os_timer_get_name (&tm1);
      assert(strcmp (name, "tm1") == 0);

      os_timer_destruct (&tm1);
    }

    {
      // Periodic timer
      os_timer_t tm2;
      os_timer_construct (&tm2, "tm2", tmfunc, NULL,
                       os_timer_attr_get_periodic ());

      os_sysclock_sleep_for (1); // Sync
      os_timer_start (&tm2, 1);

      os_sysclock_sleep_for (2);

      os_timer_stop (&tm2);

      name = os_timer_get_name (&tm2);
      assert(strcmp (name, "tm2") == 0);

      os_timer_destruct (&tm2);
    }
}
 @endcode
 */

/**
 @defgroup cmsis-plus-rtos-c-memres Memory management
 @ingroup cmsis-plus-rtos-c
 @brief  C API memory management definitions.
 @details

 The ÂµOS++ RTOS includes several advanced and flexible 
 memory management features.
 
 Access to these classes from C can be done using the `os_memory_*()` 
 functions.
 
 @par For the complete definition, see
   @ref cmsis-plus-rtos-memres "RTOS C++ API"

 @par Examples

 @code{.c}
int
os_main (int argc, char* argv[])
{
  os_memory_t* mem;

  // Get the memory resource used to manage the application free store.
  mem = os_memory_get_default();

  void* p;
  p = os_memory_allocate(mem, 123, 8);
  os_memory_deallocate(mem, p, 123, 8);

  // Print some memory resource statistics.
  trace_printf("%u\n", os_memory_get_free_bytes(mem));
}
 @endcode

 */
// ----------------------------------------------------------------------------

